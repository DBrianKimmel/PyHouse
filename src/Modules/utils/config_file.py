"""
-*- test-case-name: PyHouse.src.Modules.utils.test.test_config_file -*-

@name: PyHouse/src/Modules/utils/test/test_config_file.py
@author: briank
@contact: <d.briankimmel@gmail.com>
@Copyright: (c)  2014 by briank
@license: MIT License
@note: Created on Jul 15, 2014
@Summary:

"""

# Import system type stuff
import datetime
import os
import sys
from xml.etree import ElementTree as ET

# Import PyMh files
from Modules.utils.tools import PrettyPrintAny


class ConfigAPI(object):

    m_std_path = '/etc/pyhouse/', '~/.PyHouse/', '/var/PyHouse/'
    m_std_name = 'master.xml'

    def _locate_config_dir(self):
        for l_dir in self.m_std_path:
            l_dir = os.path.expanduser(l_dir)
            if os.path.exists(l_dir):
                return l_dir
        return None

    def _locate_config_file(self):
        l_dir = self._locate_config_dir()
        l_file = os.path.join(l_dir, self.m_std_name)
        return l_file

    def create_find_config_dir(self):
        """Check for directory existence.  If not, try creating one.
        If we can't create one, return a failure.

        @return: the path we created or found
        """
        for l_dir in self.m_std_path:
            l_dir = os.path.expanduser(l_dir)
            if os.path.exists(l_dir):
                return l_dir
        for l_dir in self.m_std_path:
            l_dir = os.path.expanduser(l_dir)
            try:
                os.mkdir(l_dir)
                return l_dir
            except OSError:
                pass
        print("Could not create any of the following {0:}".format(self.m_std_path))
        sys.exit(1)

    def find_config_file(self, p_dir):
        """Add a file name to the passed in dir to get the config file.
        """
        l_file_name = os.path.join(p_dir, self.m_std_name)
        try:
            open(l_file_name, mode = 'r')
        except IOError:
            self.create_empty_config_file(l_file_name)
        return l_file_name

    def create_empty_config_file(self, p_name):
        """Create an empty skeleton XML config file.

        @param p_name: the complete path and filename to create.
        """
        l_top = ET.Element('PyHouse')
        l_comment = ET.Comment('Generated by PyHouse {0:}'.format(datetime.datetime.now()))
        l_top.append(l_comment)
        open(os.path.expanduser(p_name), 'w')
        l_nice = PrettyPrintAny(l_top, 'XML_Tools - Create empty file')
        print(l_nice)
        ET.ElementTree(l_top).write(p_name)


    def open_config_file(self):
        """Open the master XML config file.

        If the file is not found, create a skeleton xml file to be populated by the user via the GUI.

        Search in several standard places for the config file;
        if not found create it after checking for read write permissions.

        @return: the open file name
        """
        l_dir = self.create_find_config_dir()
        l_file_name = self.find_config_file(l_dir)
        try:
            open(l_file_name, mode = 'r')
        except Exception as e:  # IOError:
            print(" -- Error in open_config_file {0:}".format(e))
            l_file_name = '/etc/pyhouse/master.xml'
            l_file_name = os.path.expanduser(l_file_name)
            self.create_empty_config_file(l_file_name)
        # print('open_config_file {0:}'.format(l_file_name))
        return l_file_name

    def read_config_file(self, p_pyhouse_obj):
        l_name = self._locate_config_file()
        p_pyhouse_obj.Xml.XmlFileName = l_name
        try:
            open(l_name, mode = 'r')
        except IOError as e_err:
            print(" -- Error in open_config_file {0:}".format(e_err))

    def write_config_file(self, p_pyhouse_obj, p_xmltree, p_filename):
        l_tree = ET.ElementTree()
        l_tree._setroot(p_xmltree)
        l_tree.write(p_filename, xml_declaration = True)

# ## END DBK
