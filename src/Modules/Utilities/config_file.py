"""
-*- test-case-name: PyHouse.src.Modules.Utilities.test.test_config_file -*-

@name: PyHouse/src/Modules/Utilities/config_file.py
@author: briank
@contact: D.BrianKimmel@gmail.com>
@Copyright: (c)  2014 by briank
@license: MIT License
@note: Created on Jul 15, 2014
@Summary:

"""

# Import system type stuff
import datetime
import os
from xml.etree import ElementTree as ET

# Import PyMh files
# from Modules.Utilities.tools import PrettyPrintAny


class ConfigAPI(object):

    m_std_path = '/etc/pyhouse/', '~/.PyHouse/', '/var/PyHouse/'
    m_std_name = 'master.xml'

    def create_empty_config_file(self, p_name):
        """Create an empty skeleton XML config file.

        @param p_name: the complete path and filename to create.
        """
        l_top = ET.Element('PyHouse')
        l_comment = ET.Comment('Generated by PyHouse {0:}'.format(datetime.datetime.now()))
        l_top.append(l_comment)
        open(os.path.expanduser(p_name), 'w')
        ET.ElementTree(l_top).write(p_name)


    def open_config_file(self, p_pyhouse_obj):
        l_name = '/etc/pyhouse/master.xml'
        p_pyhouse_obj.Xml.XmlFileName = l_name
        try:
            open(l_name, mode = 'r')
        except IOError as e_err:
            print(" -- Error in open_config_file {0:}".format(e_err))

    def write_xml_config_file(self, p_pyhouse_obj, p_xmltree):
        l_tree = ET.ElementTree()
        l_tree._setroot(p_xmltree)
        l_tree.write(p_pyhouse_obj.Xml.XmlFileName, xml_declaration = True)

# ## END DBK
