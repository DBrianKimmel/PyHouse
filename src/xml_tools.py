#!/usr/bin/env python

"""
"""

import os
from xml.etree import ElementTree as ET
from xml.dom import minidom

def prettify(elem):
    """Return a pretty-printed XML string for the Element.

    @param elem: an element to format as a readable xml tree.
    @return: a string formatted with indeentation and newlines.
    """
    rough_string = ET.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")

def find_config_file():
    """Look in several standard places for the xml config file.

    Config files end with '.xcfg' for xml config.
    Other config files for older versions will be ignored.

    @return: the full os path name for the file or None if no file exists.

    Note - Order of the following is important.  Place the most overriding items first.
    """
    l_std_path = '~', '/etc', '/var'
    l_std_name = 'PyHouse.xcfg', 'PyHouse.cfg'
    for l_dir in l_std_path:
        l_dir = os.path.expanduser(l_dir)
        #print "xml_tools find_config_file - checking dir: {0:}".format(l_dir)
        if not os.path.exists(l_dir):
            print "xml_tools find_config_file - No such path exists!"
            continue
        for l_name in l_std_name:
            #print "xml_tools find_config_files - checking filename: {0:}".format(l_name)
            l_file = os.path.join(l_dir, l_name)
            if os.path.exists(l_file):
                #print "xml_tools find_onfig_file - found file: {0:}".format(l_file)
                return l_file
    print "xml_tools find_config_file - nothing found."
    return None

def create_empty_config_file(p_name):
    """Create aempty skeleton XML config file.

    @param p_name: the complete path and filename to create.
    """
    print "xml_tools create_empty_config_file"
    l_top = ET.Element('PyHouse')
    l_comment = ET.Comment('Generated by PyHouse')
    l_top.append(l_comment)
    l_log = ET.SubElement(l_top, 'LogFiles')
    l_house = ET.SubElement(l_top, 'Houses')
    l_sched = ET.SubElement(l_top, 'Schedules')
    l_light = ET.SubElement(l_top, 'Lighting')
    l_web = ET.SubElement(l_top, 'WebServer')
    l_fh = open(os.path.expanduser(p_name), 'w')
    l_nice = prettify(l_top)
    print l_nice
    #l_fh.write(l_nice)
    #l_fh.close()
    ET.ElementTree(l_top).write(p_name)

def open_config():
    """Open the PyHouse config xml file.

    If the file is not found, create a skeleton xml file to be populated by the user via the GUI.

    Search in several standard places for the config file;
    if not found create it after checking for read write permissions.

    @return: the open file name
    """
    #print "xml_tools open_config"
    l_fn = find_config_file()
    try:
        l_fh = open(l_fn, mode='r')
    except: # IOError:
        l_fn = '~/PyHouse.xcfg'
        l_fn = os.path.expanduser(l_fn)
        create_empty_config_file(l_fn)
    return l_fn

### END
